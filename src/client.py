# ==================================================================
# =========== Implementa√ß√£o de uma aplica√ß√£o de rede ===============
#     DUPLA: GABRIEL VINICIUS GREGUER - MATHEUS DE FARIAS BONFIM
# ==================================================================

"""
No TCP √© necess√°rio pedir conex√£o ao servidor
"""
import socket
import pickle

# Cria√ß√£o de um socket TCP usado para comunica√ß√£o de dados
tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Configura√ß√£o

ip_serv = '127.0.0.1' # Endere√ßo IP do servidor - localhost

porta_serv = 5300 # Porta do servidor

dest = (ip_serv, porta_serv) # IP e porta do servidor em um tupla

tcp.connect(dest) # Manda um SYN para conectar com o servidor 
                  # S√≥ terminar quando receber o ACK 
                  # Fica travado at√© conectar ao servidor - Timeout

# ==========================================================

# FUN√á√ïES

def imprimiParametros(n, m):
    print("\n=============================================================",end='\n')
    print("\n===== ‚ô†  BEM-VINDO AO JOGO DO NIM! - CLIENT/JOGADOR 2 ‚ô† ===== ",end='\n')
    print("\n=============================================================",end='\n\n')

    print("A partida est√° configurada com os seguintes par√¢metros:", end='\n\n')
    
    print(f"1- N√∫mero de pe√ßas: {n} pe√ßas\n")
    print(f"2- Pe√ßas por jogada: 1 a {m} pe√ßas\n")


def decisionOddOrEven():
    print("\n========== QUEM COME√áA O JOGO? ==========  \n")
    print("Vamos decidir por impar ou par:\n")
    print("\t [0] - √çmpar\n")
    print("\t [1] - PAR\n\n")

    decision = int(input("‚ûî Digite a op√ß√£o [0 ou 1]: "))

    # Verifica se foi escrito uma op√ß√£o v√°lida
    while (decision != 0) & (decision != 1):
        print("\n !!! A op√ß√£o escolhida √© inv√°lida !!!\n")
        print("\t [0] - √çmpar\n")
        print("\t [1] - PAR\n")
        decision = int(input("‚ûî Digite novamente [0 ou 1]: "))

    return decision

def infoPlayerStartGame(player):
    print("\n\n========== START GAME ==========\n")

    if (player == 'player2'):
        print("O jogador 2 (client) ganhou o √≠mpar ou par e iniciar√° o jogo")
    else:
        print("O jogador 1 (server) ganhou o √≠mpar ou par e iniciar√° o jogo")


def usuario_escolhe_jogada():
      """
      - Solicita quantas pe√ßas o usu√°rio ir√° tirar
      - Verifica a validade dos par√¢metros
      - Retorna o valor de pe√ßas retiradas
      """
      numero = int(input('\n\n‚ûî Quantas pe√ßas voc√™ vai tirar? '))

      while numero > numPecas or numero > limitePecas or numero <= 0:
          print("\nOops! Jogada inv√°lida! Tente de novo.")
          numero = int(input("\n‚ûî Quantas pe√ßas voc√™ vai tirar? "))

      return numero

def theEnd(ganhador):
      if (ganhador):
        print("\n\n================================\n")
        print("üèÜüèÜüèÜ VOC√ä GANHOU!!üèÜüèÜüèÜ")
        print("\n================================\n")
      else:
        print("\n\n================================\n") 
        print("‚ùå‚ùå‚ùå VOC√ä PERDEU! ‚ùå‚ùå‚ùå")
        print("\n================================\n")


# ==========================================================

# √çNICIO

## RECEIVING GAME PARAMETERS 
    # Parametros do jogo
numPecas, limitePecas = pickle.loads(tcp.recv(24))


## INFORMATION GAME
    # Imprime parametros
imprimiParametros(numPecas, limitePecas)


## ODD OR EVEN
    # Decis√£o de quem come√ßa o jogo - Impar ou par
odd_or_even = decisionOddOrEven()

    # Envia um inteiro para indicar a escolha do impar ou par
tcp.send(odd_or_even.to_bytes(16,'big'))


## INFORMATION PLAYER START GAME
    # Recebendo a decis√£o de quem come√ßa o jogo
resp1 = tcp.recv(1024)

initial_player = resp1.decode()

    # Emite informa√ß√£o de quem come√ßa o jogo
infoPlayerStartGame(initial_player) 

# =========================================================================

# GAME

firstTime = None

if initial_player == 'player2':

    retirada = usuario_escolhe_jogada()

    print(f"\n\tVoc√™ tirou {retirada} pe√ßa(s).")
    
    numPecas = numPecas - retirada

    print(f"\n\tAgora restam {numPecas} pe√ßas no tabuleiro.")

    tcp.send(numPecas.to_bytes(16, 'big'))
   
else:
    # Primeira vez do jogador 1 (Caso n√£o jogue primeiro)
    firstTime = True

while ((numPecas > 0) or firstTime):

    firstTime = False
    numPecas_server = int.from_bytes(tcp.recv(16), 'big') 
    
    jogada_anterior_restantes = numPecas - numPecas_server

    numPecas = numPecas_server

    if (numPecas == 0):
        theEnd(False)
        break
    
    print("\n================================\n")
    print(f"\n\tO player 1 tirou {jogada_anterior_restantes} pe√ßa(s).")
    print(f"\n\tAgora restam {numPecas} pe√ßas no tabuleiro.")
    

    if (numPecas == 0):
        theEnd(False)
        break
    
    retirada = usuario_escolhe_jogada()

    print(f"\n\tVoc√™ tirou {retirada} pe√ßa(s).")
    
    numPecas = numPecas - retirada

    if (numPecas == 0):
        theEnd(True)
        break

    print(f"\n\tAgora restam {numPecas} pe√ßas no tabuleiro.")

    tcp.send(numPecas.to_bytes(16, 'big'))
    
# =========================================================================    


tcp.close()

input("aperte enter para encerrar")